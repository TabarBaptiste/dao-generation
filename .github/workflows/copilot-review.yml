name: Copilot Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  copilot-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            src/**/*.{ts,js,tsx,jsx}
            tests/**/*.{ts,js,tsx,jsx}

      - name: Code Quality Check
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          # V√©rifications de qualit√© basiques
          echo "## üîç Analyse de qualit√© automatique" >> $GITHUB_STEP_SUMMARY
          
          # Compte les lignes de code modifi√©es
          ADDED_LINES=$(git diff --numstat origin/main...HEAD | awk '{sum += $1} END {print sum}')
          REMOVED_LINES=$(git diff --numstat origin/main...HEAD | awk '{sum += $2} END {print sum}')
          
          echo "- ‚úÖ Lignes ajout√©es: $ADDED_LINES" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Lignes supprim√©es: $REMOVED_LINES" >> $GITHUB_STEP_SUMMARY
          
          # V√©rifie la pr√©sence de console.log
          if git diff origin/${{ github.base_ref }}...HEAD | grep -E "console\.(log|debug|info|warn|error)"; then
            echo "- ‚ö†Ô∏è Console.log d√©tect√©s - √† nettoyer avant merge" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ Pas de console.log d√©tect√©s" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8').slice(0, 5000);

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîç Revue automatique du code

              ${summary}

              ### üí° Suggestions d'am√©lioration
              - V√©rifie la coh√©rence du nommage des variables et fonctions (lisibilit√©, convention eslint.config.mjs).
              - Ajoute des commentaires ou **JSDoc sur les fonctions** publiques et les classes cl√©s.
              - V√©rifie les imports inutilis√©s ou redondants.
              - Confirme que tous les types (TypeScript) sont explicites, (limiter les types \\`any\\`).

              *Ce rapport automatique aide √† rep√©rer les points d'am√©lioration et √† garantir une base de code propre, coh√©rente et maintenable.*`
            });